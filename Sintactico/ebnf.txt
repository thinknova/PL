<programa> ::= <declaraciones>

<declaraciones> := <declaraciones> <declaracion_funcion> 
			| <declaraciones> <declaracion_variables> 
			| <declaraciones> <definicion_tipo> 
			| 

<definicion_tipo> := typedef <declaracion_variables>

<tipo> := void | float | char | double | int
	
<declaracion_funcion> := <tipo> <identificador> '(' <paso_parametros> ') '{' <posible_declaraciones_variables> <lista_sentencias> '}'
			| <tipo> <identificador> '(' ')' '{' <posible_declaraciones_variables> <lista_sentencias> '}'

<paso_parametros> := <parametro> 
			| <paso_parametro> ',' <parametro>
			
<parametro> := <declaracion_variable_simple_parametro>
			| <declaracion_variable_simple_parametro> <corchetes>
			
<declaracion_variable_simple_parametro> := <tipo> <identificador>
			| <tipo> * <identificador>

<corchetes> := '[' ']'
			| '[' ']' '[' ']'
			| '[' numero ']'
			| '[' numero ']' '[' numero ']'

<posible_declaraciones_variables> := <declaraciones_variables>
			|

<declaraciones_variables> := <declaracion_variables>
			| <declaracion_variables> <declaraciones_variables>

<declaracion_variables> := <declaracion_variable_simple> <mas_identificadores> ;
			| <declaracion_variable_simple> '=' <expresion> ;
			| <declaracion_variable_simple> <corchetes> <mas_identificadores> ;
			| <declaracion_variable_simple> <corchetes> '=' <inicializador> ;
			
<declaracion_variable_simple> := <tipo> <identificador> 
			| <tipo> * <identificador>

<mas_identificadores> := <mas_identificadores> , <identificador>
			| <mas_identificadores> , <identificador> <corchetes>
			| <mas_identificadores> , * <identificador>
			|

<inicializador> := <identificador> 
			| '{' <lista_inicializador> '}'
			
<lista_inicializador> := <identificador>
			| <lista_inicializador> , <identificador>
			
<lista_sentencias> := <sentencia> 
			| <lista_sentencias> <sentencia>
			
<sentencia> := <sentencias_control>
			| <sentencias_salto>
			| <sentencias_etiquetas>
			| <sentencias_expresiones>

<sentencias_control> := <sentencia_while>
			| <sentencia_if>
			| <sentencia_for>
			| <sentencia_switch>
			| <sentencia_do_while>
			
<sentencias_salto> := break ;
			| goto <identificador> ;
			| return ;
			| return <expresion> ;

<sentencias_etiquetas> := case numero ':' '{' <lista_sentencias> '}'

<sentencias_expresiones> := ;
			| <expresion> ;

<sentencia_if> := if '(' <expresion> ')' '{' <lista_sentencias> '}'
		
<sentencia_do_while> := do '{' <lista_sentencias> '}' while '(' <expresion> ')' ;

<sentencia_switch> := switch '(' <expresion> ')' '{' <muchas_sentencias_etiquetas> '}'

<muchas_sentencias_etiquetas> := <sentencias_etiquetas> <muchas_sentencias_etiquetas>
			| default ':' <lista_sentencias>

<sentencia_while> := whie '(' <expresion> ')' '{' <lista_sentencias> '}'

<sentencia_for> := for '(' <posible_expresion> ; <posible_expresion> ; <posible_expresion> ')' '{' <lista_sentencias> '}'

<posible_expresion> := <expresion>
			| 

<expresion> := <expresion_asignacion>
			| <expresion> ; <expresion_asignacion>
			
<expresion_asignacion> := <expresion_condicional> 
			| <expresion_unaria> <operador_asignacion> <expresion_asignacion>

<operador_asignacion> := '='
			| * '='
			| / '='
			| % '='
			| + '='
			| - '='

<expresion_condicional> := <expresion_logica_or>

<expresion_logica_or> := <expresion_logica_and> 
			| <expresion_logica_or> '|' '|' <expresion_logica_and>

<expresion_logica_and> := <expresion_inclusiva_or>
			| <expresion_inclusiva_or>
			| <expresion_logica_and> && <expresion_inclusiva_or>
			
<expresion_inclusiva_or> := <expresion_exclusiva_or>
			| <expresion_inclusiva_or> '|' <expresion_exclusiva_or>
			
<expresion_exclusiva_or> := <expresion_and>
 			| <expresion_exclusiva_or> ^ <expresion_and>

<expresion_and> := <expresion_igualdad> 
			| <expresion_and> & <expresion_igualdad>

<expresion_igualdad> := <expresion_relacional> 
			| <expresion_igualdad> '=' '=' <expresion_relacional>
			| <expresion_igualdad> ! '=' <expresion_relacional>

<expresion_relacional> := <expresion_shift> 
			| <expresion_relacional> '<' <expresion_shift> 
			| <expresion_relacional> '>' <expresion_shift>
			| <expresion_relacional> '<' '=' <expresion_shift>
			| <expresion_relacional> '>' '=' <expresion_shift>

<expresion_shift> := <expresion_aditiva> 
			| <expresion_shift> '<' '<' <expresion_aditiva>
			| <expresion_shift> '>' '>' <expresion_aditiva>

<expresion_aditiva> := <expresion_multiplicativa>
			| <expresion_aditiva> + <expresion_multiplicativa>
			| <expresion_aditiva> - <expresion_multiplicativa>

<expresion_multiplicativa> := <expresion_cast>
			| <expresion_multiplicativa> * <expresion_cast>
			| <expresion_multiplicativa> / <expresion_cast>
			| <expresion_multiplicativa> % <expresion_cast>

<expresion_cast> := <expresion_unaria> 
			| '(' <tipo> ')' <expresion_cast>

<expresion_unaria> := <expresion_asignable>
			| <operador_unario> <identificador>
			| <expresion_unaria> ++
			| <expresion_unaria> --
			| -- <expresion_asignable>
			| ++ <expresion_asignable>
			
<expresion_asignable> := <expresion_primaria> 
			| <expresion_asignable> '.' <identificador> 
			
<operador_unario> := & 
			| * 
			| ~ 
			| '|'

<expresion_primaria> := <identificador>
			| numero
			| string
			| string_c
			| caracter
			| '(' <expresion> ')'
			
<identificador> := identificator